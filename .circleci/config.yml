version: 2.1

executors:
  terraform-executor:
    docker:
      - image: hashicorp/terraform:light

parameters:
  deploy_infra:
    type: boolean
    default: false
  deploy_k8s:
    type: boolean
    default: false

jobs:
  say-hello:
    docker:
      - image: cimg/base:current

    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  
  terraform-init:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Authenticate with AWS OIDC
          command: |
            yum install -y unzip curl
            export AWS_ROLE_ARN="arn:aws:iam::183631319967:role/sagar-oidc"
            export AWS_WEB_IDENTITY_TOKEN_FILE="/tmp/token"
            curl -fsSL "${CIRCLE_OIDC_TOKEN}" -o $AWS_WEB_IDENTITY_TOKEN_FILE
            aws sts assume-role-with-web-identity \
              --role-arn "$AWS_ROLE_ARN" \
              --role-session-name "CircleCIJob" \
              --web-identity-token "$(cat $AWS_WEB_IDENTITY_TOKEN_FILE)" \
              --duration-seconds 3600 > /tmp/aws-credentials.json
            export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/aws-credentials.json)
            export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/aws-credentials.json)
            export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/aws-credentials.json)
      - run:
          name: Terraform Init
          command: cd terraform && terraform init -backend-config=backend/dev

  terraform-plan:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform Plan
          command: cd terraform && terraform plan -out=tfplan
      - persist_to_workspace:
          root: .
          paths:
            - tfplan

  terraform-apply:
    executor: terraform-executor
    working_directory: ~/terraform
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Terraform Apply
          command: cd terraform && terraform apply -auto-approve tfplan

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform Destroy
          command: terraform destroy -auto-approve

  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Authenticate with AWS ECR
          command: |
            aws ecr get-login-password --region ap-south | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com
      - run:
          name: Build & Push Docker Image
          command: |
            docker build -t hello-world .
            docker tag hello-world:latest 123456789012.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest
            docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest

  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Configure AWS CLI & EKS Access
          command: |
            aws eks update-kubeconfig --name hello-world-cluster --region ap-south-1
      - run:
          name: Deploy to Kubernetes (Fargate)
          command: |
            kubectl apply -f k8s/namespace.yaml
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml

workflows:
  say-hello-workflow:
    jobs:
      - say-hello
  terraform-deploy:
    when: << pipeline.parameters.deploy_infra >>
    jobs:
      - terraform-init
      - terraform-plan:
          requires:
            - terraform-init
      # - terraform-apply:
      #     requires:
      #       - terraform-plan
  build-and-deploy:
    when: << pipeline.parameters.deploy_k8s >>
    jobs:
      - build:
          requires:
            - terraform
      - deploy:
          requires:
            - build