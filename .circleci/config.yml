version: 2.1

executors:
  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.6.3
    resource_class: medium

parameters:
  deploy_infra:
    type: boolean
    default: false
  deploy_app:
    type: boolean
    default: false
  destroy_infra:
    type: boolean
    default: false
  verify_app:
    type: boolean
    default: false

commands:
  aws-authentication:
    steps:
      - run:
          name: Authenticate with AWS OIDC
          command: |
            apk add --no-cache curl jq aws-cli
            echo "${CIRCLE_OIDC_TOKEN}" > /tmp/token.jwt || true
            export AWS_ROLE_ARN="arn:aws:iam::183631319967:role/sagar-oidc"
            export AWS_WEB_IDENTITY_TOKEN_FILE="/tmp/token.jwt"

            aws sts assume-role-with-web-identity \
                  --role-arn "$AWS_ROLE_ARN" \
                  --role-session-name "CircleCIJob" \
                  --web-identity-token "$(cat $AWS_WEB_IDENTITY_TOKEN_FILE)" \
                  --duration-seconds 3600 > /tmp/aws-credentials.json

            AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/aws-credentials.json)
            AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/aws-credentials.json)
            AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/aws-credentials.json)

            if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
              echo "ERROR: AWS credentials not retrieved properly"
              exit 1
            fi

            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
            echo "export AWS_REGION=ap-south-1" >> $BASH_ENV
            echo "export AWS_DEFAULT_REGION=ap-south-1" >> $BASH_ENV
            source $BASH_ENV

            aws sts get-caller-identity

  aws-authentication-docker:
    steps:
      - run:
          name: Authenticate with AWS OIDC
          command: |
            sudo apt-get update && sudo apt-get install -y curl jq less
            echo "${CIRCLE_OIDC_TOKEN}" > /tmp/token.jwt || true
            export AWS_ROLE_ARN="arn:aws:iam::183631319967:role/sagar-oidc"
            export AWS_WEB_IDENTITY_TOKEN_FILE="/tmp/token.jwt"
            
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            export PATH=/usr/local/bin:$PATH
            aws --version
            echo "HERE!!"
            aws sts assume-role-with-web-identity \
                  --role-arn "$AWS_ROLE_ARN" \
                  --role-session-name "CircleCIJob" \
                  --web-identity-token "$(cat $AWS_WEB_IDENTITY_TOKEN_FILE)" \
                  --duration-seconds 3600 > /tmp/aws-credentials.json
            
            AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/aws-credentials.json)
            AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/aws-credentials.json)
            AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/aws-credentials.json)

            if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_SESSION_TOKEN" ]; then
              echo "ERROR: AWS credentials not retrieved properly"
              exit 1
            fi
            
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
            echo "export AWS_REGION=ap-south-1" >> $BASH_ENV
            echo "export AWS_DEFAULT_REGION=ap-south-1" >> $BASH_ENV
            source $BASH_ENV

            aws sts get-caller-identity

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           
            unzip awscliv2.zip
            echo "HERE????????????????"
            sudo ./aws/install --update
            aws --version
            aws sts get-caller-identity

jobs:
  say-hello:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: Say Hello
          command: echo "Hello, World!"

  terraform-plan:
    executor: terraform-executor
    working_directory: ~/terraform
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-authentication
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd terraform && terraform init -backend-config=backend/dev
      - run:
          name: Terraform Plan
          command: |
            source $BASH_ENV
            cd terraform && terraform plan
            
  terraform-apply:
    executor: terraform-executor
    working_directory: ~/terraform
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-authentication
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd terraform && terraform init -backend-config=backend/dev
      - run:
          name: Terraform Apply
          command: |
            source $BASH_ENV
            cd terraform && terraform apply -auto-approve

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - aws-authentication
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd terraform && terraform init -backend-config=backend/dev
      - run:
          name: Terraform Destroy
          command: |
            source $BASH_ENV
            cd terraform && terraform destroy -auto-approve   

  build:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Debug Workspace
          command: ls -R 
      - aws-authentication-docker
      - run:
          name: Authenticate with AWS ECR
          command: |
            source $BASH_ENV
            aws ecr get-login-password --region ap-south-1 | \
            docker login --username AWS --password-stdin 183631319967.dkr.ecr.ap-south-1.amazonaws.com
      - run:
          name: Build & Push Docker Image
          command: |
            docker build -t hello-world .
            docker tag hello-world:latest 183631319967.dkr.ecr.ap-south-1.amazonaws.com/hello-world:latest
            docker push 183631319967.dkr.ecr.ap-south-1.amazonaws.com/hello-world:latest

  deploy:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - aws-authentication-docker
      - run:
          name: Install kubectl & AWS IAM Authenticator
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client

      - run:
          name: Configure AWS CLI & EKS Access
          command: |
            source $BASH_ENV
            aws eks update-kubeconfig --name hello-world-cluster --region ap-south-1 --alias eks-cluster
      - run:
          name: Deploy to Kubernetes (Fargate)
          command: |
            kubectl apply -f k8s/namespace.yaml
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml

  verify-deployments:
    docker:
      - image: circleci/python:latest
    steps:
      - checkout
      - aws-authentication-docker
      - run:
          name: Install kubectl & AWS IAM Authenticator
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            kubectl version --client
      - run:
          name: Check EKS Cluster Context
          command: |
            kubectl config current-context
            kubectl get nodes
            kubectl get all -A
      - run:
          name: Verify Namespace Exists
          command: |
            kubectl get namespaces
      - run:
          name: Check EKS Nodes
          command: |
            aws eks list-fargate-profiles --cluster-name hello-world-cluster
            kubectl get nodes
      - run:
          name: Debug Kubernetes Resources
          command: |
            kubectl get deployments -A
            kubectl get pods -A
            kubectl get services -A
            kubectl describe pods -A
      - run:
          name: Check IAM Role Permissions
          command: |
            aws sts get-caller-identity
            aws eks describe-cluster --name hello-world-cluster


workflows:
  terraform-deploy:
    when: << pipeline.parameters.deploy_infra >>
    jobs:
      - terraform-plan
      - terraform-apply-approval:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
          requires:
            - terraform-apply-approval
  
  build-and-deploy:
    when: << pipeline.parameters.deploy_app >>
    jobs:
      - build
      - deploy:
          requires:
            - build

  verify-deployment:
    # when: << pipeline.parameters.verify_app >>
    jobs:
      - verify-deployments

  terraform-destroy:
    when: << pipeline.parameters.destroy_infra >>
    jobs:
      - terraform-destroy
